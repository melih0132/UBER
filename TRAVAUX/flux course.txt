// ============================================================
// * DEMANDE DE COURSE IMMÉDIATE
// ============================================================
// ? 1 - Affichage des prestations disponibles pour une demande immédiate
Route::post('/course/immediate', [CourseController::class, 'index'])->name('course.immediate.index');

// ? 2 - Visualisation des détails de la réservation immédiate
Route::get('/course/immediate/details', [CourseController::class, 'showDetails'])->name('course.immediate.details');

// ? 3 - Acceptation de la réservation immédiate proposée
Route::post('/course/immediate/validate', [CourseController::class, 'validateImmediate'])->name('course.immediate.validate');

// ? 4 - Recherche et notification des coursiers dans le secteur par le service course
Route::post('/course/immediate/search-driver', [ServiceCourseController::class, 'searchDriverForImmediate'])->name('course.immediate.search-driver');
Route::post('/course/immediate/ask-driver', [ServiceCourseController::class, 'askDriverForImmediate'])->name('course.immediate.ask-driver');

// 5 - Coursier visualise toutes les courses proposées par le service course
Route::get('/coursier/courses', [CoursierController::class, 'index'])->name('coursier.courses.index');

// ? 6 - Coursier visualise les demandes spécifiques de courses immédiates
Route::get('/coursier/courses/immediate', [CoursierController::class, 'listImmediateCourses'])->name('coursier.courses.immediate');

// ? 7 - Coursier accepte une demande de course immédiate
Route::post('/coursier/courses/immediate/start', [CoursierController::class, 'startImmediateCourse'])->name('coursier.immediate.start');

// ? 8 - Client visualise la course acceptée par le coursier et peut indiquer son début
Route::get('/course/immediate/detail', [CourseController::class, 'detailImmediate'])->name('course.immediate.detail');
Route::post('/course/immediate/start', [CourseController::class, 'startImmediate'])->name('course.immediate.start');

// ? 9 - Coursier indique le début de la course (détails inclus, tel que statut et informations associées)
Route::get('/coursier/courses/immediate/detail', [CoursierController::class, 'detailImmediateCourse'])->name('coursier.immediate.detail');

// ? 10 - Annulation de la course par le client (validation requise si course déjà démarrée)
Route::post('/course/immediate/cancel', [CourseController::class, 'cancelImmediate'])->name('course.immediate.cancel');

// ? 11 - Coursier termine la course
Route::post('/coursier/courses/immediate/finish', [CoursierController::class, 'finishImmediateCourse'])->name('coursier.immediate.finish');

// ? 12 - Client confirme que la course est terminée
Route::post('/course/immediate/finish', [CourseController::class, 'finishImmediate'])->name('course.immediate.finish');

// ? 13 - Client donne un pourboire et une note au coursier, génère une facture si demandé
Route::post('/course/immediate/add-tip-rate', [CourseController::class, 'addTipAndRate'])->name('course.immediate.addTipRate');
Route::post('/course/immediate/invoice/{idreservation}', [FacturationController::class, 'generateInvoiceCourse'])->name('course.immediate.invoice');

// ============================================================
// * DEMANDE DE COURSE NON IMMÉDIATE
// ============================================================
// ? 1 - Affichage des prestations disponibles pour une réservation non immédiate
Route::post('/course/scheduled', [CourseController::class, 'indexScheduled'])->name('course.scheduled.index');

// ? 2 - Visualisation des détails d'une réservation non immédiate
Route::get('/course/scheduled/details', [CourseController::class, 'showScheduledDetails'])->name('course.scheduled.details');

// ? 3 - Acceptation de la réservation non immédiate proposée
Route::post('/course/scheduled/validate', [CourseController::class, 'validateScheduled'])->name('course.scheduled.validate');

// ? 4 - Annulation de la réservation non immédiate
Route::post('/course/scheduled/cancel', [CourseController::class, 'cancelScheduled'])->name('course.scheduled.cancel');

// ? 5 - Visualisation par le client des informations de réservation programmée
Route::get('/course/scheduled/detail', [CourseController::class, 'detailScheduled'])->name('course.scheduled.detail');

// ? 6 - Recherche et notification des coursiers dans le secteur par le service course
Route::post('/course/scheduled/search-driver', [ServiceCourseController::class, 'searchDriverForScheduled'])->name('course.scheduled.search-driver');
Route::post('/course/scheduled/ask-driver', [ServiceCourseController::class, 'askDriverForScheduled'])->name('course.scheduled.ask-driver');

// 7 - Coursier visualise toutes les courses proposées par le service course
// Route::get('/coursier/courses', [CoursierController::class, 'index'])->name('coursier.courses.index');

// ? 8 - Coursier accepte une demande de course non immédiate
Route::post('/coursier/courses/scheduled/accept', [CoursierController::class, 'acceptScheduledCourse'])->name('coursier.scheduled.accept');

// ? 9 - Coursier indique la prise en charge et la fin d'une réservation non immédiate
Route::post('/coursier/courses/scheduled/start', [CoursierController::class, 'startScheduledCourse'])->name('coursier.scheduled.start');
Route::post('/coursier/courses/scheduled/finish', [CoursierController::class, 'finishScheduledCourse'])->name('coursier.scheduled.finish');

// ? 10 - Client donne un pourboire et une note au coursier pour une course non immédiate
Route::post('/course/scheduled/add-tip-rate', [CourseController::class, 'addTipAndRate'])->name('course.scheduled.addTipRate');
Route::post('/course/scheduled/invoice/{idreservation}', [FacturationController::class, 'generateInvoiceCourse'])->name('course.scheduled.invoice');
